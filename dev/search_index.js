var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ActionModels","category":"page"},{"location":"#HGF","page":"Home","title":"HGF","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ActionModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ActionModels]","category":"page"},{"location":"#ActionModels.premade_agents","page":"Home","title":"ActionModels.premade_agents","text":"\n\n\n\n","category":"constant"},{"location":"#ActionModels.Agent","page":"Home","title":"ActionModels.Agent","text":"\n\n\n\n","category":"type"},{"location":"#ActionModels.RejectParameters","page":"Home","title":"ActionModels.RejectParameters","text":"Custom error type which will result in rejection of a sample\n\n\n\n\n\n","category":"type"},{"location":"#ActionModels.create_agent_model-NTuple{5, Any}","page":"Home","title":"ActionModels.create_agent_model","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.fit_model-Tuple{Agent, Dict, Array, Array}","page":"Home","title":"ActionModels.fit_model","text":"\"\"     fitmodel(agent::Agent,inputs::Array,actions::Vector,parampriors::Dict,fixedparams::Dict = Dict();     sampler = NUTS(),niterations = 1000, n_chains = 1,verbose = true,)\n\nReturns a summary of the fitted parameters (parameters specified with param_prios). \n\nArguments\n\n'agent::Agent': a specified agent created with either premade agent or init_agent.\n'inputs:Array': array of inputs.\n'actions::Vector': vector of actions.\n'param_priors::Dict': priors (written as distributions)for the parameters you wish to fit.\n'fixed_params::Dict = Dict()': fixed parameters.\n'imputemissingactions = false': if true, include missing actions in the fitting process.\n'sampler = NUTS()': specify the type of sampler.\n'n_iterations = 1000': iterations pr. chain.\n'n_chains = 1': amount of chains.\n'verbose = true': set to false to hide warnings\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.get_history-Tuple{Agent}","page":"Home","title":"ActionModels.get_history","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.get_history-Tuple{Nothing, Union{String, Tuple}}","page":"Home","title":"ActionModels.get_history","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.get_history-Tuple{Nothing}","page":"Home","title":"ActionModels.get_history","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.get_posteriors-Tuple{MCMCChains.Chains}","page":"Home","title":"ActionModels.get_posteriors","text":"get_posteriors(chain::Chains; type::String = \"median\")\n\nExtracting parameters from a Turing chain\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.get_states-Tuple{Agent, Union{String, Tuple}}","page":"Home","title":"ActionModels.get_states","text":"get_states(agent::Agent, target_state::Union{String,Tuple})\n\nextract target state from agent's states.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.get_states-Tuple{Agent, Vector}","page":"Home","title":"ActionModels.get_states","text":"get_states(agent::Agent, target_states::Vector)\n\nspecify a vector of target states you wish to extract.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.get_states-Tuple{Agent}","page":"Home","title":"ActionModels.get_states","text":"Get_states(agent::Agent)\n\nGet all target states from an agent.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.get_states-Tuple{Nothing}","page":"Home","title":"ActionModels.get_states","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.give_inputs!-Tuple{Agent, Array}","page":"Home","title":"ActionModels.give_inputs!","text":"give_inputs!(agent::Agent, inputs::Array)\n\nFunction for inputting multiple observations to an agent. Input is structured as an Array, with each row being a single input consisting of multiple numbers.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.give_inputs!-Tuple{Agent, Real}","page":"Home","title":"ActionModels.give_inputs!","text":"give_inputs!(agent::Agent, inputs::Real)\n\nConvenience method for inputting multiple observations to an agent. Input is here just a single value.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.give_inputs!-Tuple{Agent, Vector}","page":"Home","title":"ActionModels.give_inputs!","text":"give_inputs!(agent::Agent, inputs::Vector)\n\nFunction for inputting multiple observations to an agent. Input is structured as an Array, with each row being a single input consisting of multiple numbers.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.init_agent-Tuple{Vector{Function}}","page":"Home","title":"ActionModels.init_agent","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.multiple_actions-Tuple{Agent, Any}","page":"Home","title":"ActionModels.multiple_actions","text":"multiple_actions(agent::Agent, input::Any)\n\nIf an agent is specified with multiple action models\n\nRuns each action model sequentially and returns the action distributions for each action model given agent and input.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.plot_predictive_simulation-Tuple{Union{Dict, MCMCChains.Chains}, Agent, Array, Union{String, Tuple}}","page":"Home","title":"ActionModels.plot_predictive_simulation","text":"plotpredictivesimulation(paramdistributions::Union{Chains,Dict}, agent::Agent, inputs::Array, targetstate::Union{String,Tuple};     fixedparams::Dict = Dict(), nsimulations::Int = 100, verbose::Bool = true, mediancolor::Union{String,Symbol} = :red, title::String = \"Sampled trajectories\",     label::Union{String,Tuple} = targetstate, alpha::Real = 0.1, linewidth::Real = 2, )\n\ncompute predictive simulation of target state/states given a set of parameter distributions.\n\nArguments\n\n'param_distributions::Union{Chains,Dict}': The parameter distributions you want to sample from during the predictive simulation. This can be a turing chain of posteriors or a regular parameter distribution.\n'agent::Agent': specified premade agent or custom made agent.\n'inputs::Array': input observations to your agent\n'target_state::Union{String,Tuple}': the state(s) or actions you want to do simulate. Note that the target state(s) need to be in the agents history. \n'fixed_params::Dict = Dict()': The fixed parameters which do not vary during the simulation.\n'n_simulations::Int = 100': amount of simulations you want to run.\n'verbose::Bool = true': if you wish to hide warnings set to false\n'median_color::Union{String,Symbol} = :red': specify color of median value in the plot\n'label::Union{String,Tuple} = target_state': label on graph\n'alpha::Real = 0.1': \n'linewidth::Real = 2': specify linewidth on your plot\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.plot_trajectory!-Tuple{Agent, Union{String, Tuple}}","page":"Home","title":"ActionModels.plot_trajectory!","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.plot_trajectory!-Tuple{Nothing, Union{String, Tuple}}","page":"Home","title":"ActionModels.plot_trajectory!","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.plot_trajectory-Tuple{Nothing, Union{String, Tuple}}","page":"Home","title":"ActionModels.plot_trajectory","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.premade_agent","page":"Home","title":"ActionModels.premade_agent","text":"function premade_agent(\n    model_name::String, params_list::NamedTuple = (;)\n)\n\nMaking a premade agent consisting of a model (a premade agent), and a list of configuations (parameter values) for the agent.\n\n\n\n\n\n","category":"function"},{"location":"#ActionModels.reset!-Tuple{Agent}","page":"Home","title":"ActionModels.reset!","text":"reset!(agent::Agent)\n\nreset an agent to initial state parameters.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.reset!-Tuple{Nothing}","page":"Home","title":"ActionModels.reset!","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.set_params!-Tuple{Agent, Dict}","page":"Home","title":"ActionModels.set_params!","text":"set_params!(agent::Agent, params::Dict)\n\nSetting multiple parameters in dictionary where parameter name is specified followed by parameter value. \n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.set_params!-Tuple{Agent, Union{String, Tuple}, Any}","page":"Home","title":"ActionModels.set_params!","text":"setparams!(agent::Agent,  targetparam::Union{String,Tuple}, param_value::Any)\n\nFunction for setting a single parameter in an agent. Input to the function is an agent, the parameter name and the parameter value.\n\n\n\n\n\n","category":"method"},{"location":"#ActionModels.set_params!-Tuple{Nothing, Union{String, Tuple}, Any}","page":"Home","title":"ActionModels.set_params!","text":"\n\n\n\n","category":"method"},{"location":"#ActionModels.single_input!-Tuple{Agent, Any}","page":"Home","title":"ActionModels.single_input!","text":"single_input!(agent::Agent, input)\n\nFunction for giving an input to an Agent.\n\n\n\n\n\n","category":"method"},{"location":"#MCMCChains.get_params-Tuple{Agent, Union{String, Tuple}}","page":"Home","title":"MCMCChains.get_params","text":"get_params(agent::Agent, target_param::Union{String,Tuple})\n\nGet out target parameter from agent \n\n\n\n\n\n","category":"method"},{"location":"#MCMCChains.get_params-Tuple{Agent, Vector}","page":"Home","title":"MCMCChains.get_params","text":"get_params(agent::Agent, target_params::Vector)\n\nReturns a vector of the target parameters specefied in target_params\n\nget_params(agent::Agent)\n\nReturns all parameters from agent\n\n\n\n\n\n","category":"method"},{"location":"#MCMCChains.get_params-Tuple{Agent}","page":"Home","title":"MCMCChains.get_params","text":"\n\n\n\n","category":"method"},{"location":"#MCMCChains.get_params-Tuple{Nothing, Union{String, Tuple}}","page":"Home","title":"MCMCChains.get_params","text":"\n\n\n\n","category":"method"}]
}
